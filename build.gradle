plugins {
    id "cpp"
    id "edu.wpi.first.GradleRIO" version "2019.0.0-alpha-3"
    id "edu.wpi.first.GradleVsCode" version "0.3.0"
}

def TEAM = 3512

task pythonTask(type: Exec) {
    workingDir 'python'
    commandLine 'python3', 'generate_coeffs.py'
}

// Define my targets (RoboRIO) and artifacts (deployable files)
// This is added by GradleRIO's backing project EmbeddedTools.
deploy {
    targets {
        target("roborio", edu.wpi.first.gradlerio.frc.RoboRIO) {
            team = getTeamOrDefault(TEAM)
        }
    }
    artifacts {
        artifact('frcCpp', edu.wpi.first.gradlerio.frc.FRCNativeArtifact) {
            targets << "roborio"
            component = 'FRCUserProgram'
            // Debug can be overridden by command line, for use with VSCode
            debug = getDebugOrDefault(false)
        }
    }
}

model {
    components {
        FRCUserProgram(NativeExecutableSpec) {
            targetPlatform 'roborio'

            binaries.all {
                binary ->
                binary.getTasks().withType(AbstractNativeSourceCompileTask) {
                    it.dependsOn pythonTask
                }
                if (!(toolChain instanceof VisualCpp))
                    cppCompiler.args << "-O2"
            }

            sources.cpp {
                source {
                    srcDirs = ['src/cpp']
                    include '**/*.cpp'
                }
                exportedHeaders {
                    srcDirs = ['src/cpp', 'src/include', 'src/include/WPILib']
                    include '**/*.hpp', '**/*.h'
                }
            }

            // Define my dependencies. In this case, WPILib (+ friends), CTRE Toolsuite (Talon SRX)
            // and NavX.
            useLibrary(it, "wpilib", "ctre")
        }
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.9'
}
